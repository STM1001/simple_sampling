[{"name":"app.R","content":"library(shiny)\r\nlibrary(bslib)\r\nlibrary(bsicons)\r\nlibrary(waiter)\r\nlibrary(plotly)\r\nlibrary(readxl)\r\nlibrary(reactable)\r\nlibrary(ggplot2)\r\n#library(rsconnect)\r\n#deployApp(\"path/to/shiny/app\")\r\n\r\n# Shiny app\r\nui <- fluidPage(\r\n  \r\n  useGarcon(),\r\n  useWaiter(),\r\n  useSteward(colors = c(\"#b51c16\", \"#e2231b\"), speed = 10),\r\n  \r\n  waiterShowOnLoad(\r\n    tags$img(\r\n      src=\"https://www.latrobe.edu.au/__data/assets/file/0010/796393/logo-white.svg\", \r\n      height=200, \r\n      id = \"LTULogo\" # set id\r\n    )\r\n  ),\r\n  \r\n  titlePanel(\"Random Sampling Visualization - STM1001 Students\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      helpText(\"Specify the population size\"),\r\n      sliderInput(\"total_points\", \"Total number of data points (Population):\", min = 10, max = 500, value = 50, step = 10),\r\n      helpText(\"Select the number of individuals to sample (less than or equal to the population number\"),\r\n      sliderInput(\"n_sample\", \"Number of points to highlight (Sample):\", value = 5, min = 1, max = 50, step = 1)\r\n    ),\r\n    mainPanel(\r\n      plotlyOutput(\"scatterPlot\")\r\n    )\r\n  )\r\n)\r\n\r\n\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  \r\n  # Load screen\r\n  \r\n  Garcon$new(\"LTULogo\",  opacity = 0, filter = \"blur\")\r\n  Sys.sleep(0.75)\r\n  waiter_show(html = spin_fading_circles()) \r\n  \r\n  Sys.sleep(0.25)\r\n  waiter_hide()\r\n  \r\n  \r\n  \r\n  data <- reactive({\r\n    data.frame(\r\n      x = rnorm(input$total_points, 20, 1),\r\n      y = rnorm(input$total_points, 165, 10)\r\n    )\r\n  })\r\n  \r\n  observe({\r\n    # Dynamically update the max value of slider for individuals based on population specified\r\n    updateSliderInput(session, \"n_sample\", max = input$total_points)\r\n  })\r\n  \r\n  random_sample <- reactive({\r\n    sample(1:input$total_points, input$n_sample)\r\n  })\r\n  \r\n  observeEvent(input$resample, {\r\n    random_sample()\r\n  })\r\n  \r\n  output$scatterPlot <- renderPlotly({\r\n    df <- data()\r\n    df$color <- ifelse(1:nrow(df) %in% random_sample(), \"highlighted\", \"normal\")\r\n    \r\n    plot_ly(df, x = ~x, y = ~y, type = \"scatter\", mode = \"markers\",\r\n            marker = list(size = 10, color = ~ifelse(color == \"highlighted\", \"red\", \"grey\")))  %>%\r\n      layout(title = \"Random Sampling Visualization\", xaxis = list(title = \"Age (years)\"),  yaxis = list(title = \"Height (cm)\"))\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
